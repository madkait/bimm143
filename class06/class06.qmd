---
title: "class06"
format: pdf
author: "Kaitlyn Madriaga, PID:A17217752"
---

```{r}
#Example input vectors to start with 
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

>Q1. Write a function grade() to determine an overall grade from a vector of student homework
assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an
NA value) this can be used as a score to be potentially dropped. Your final function should be
adquately explained with code comments and be able to work on an example class gradebook
such as this one in CSV format

We can use the "mean()" function to calculate the average  
```{r}
mean(student1)
```
This doesn't work with student 2, because they have NA. To remove NA, we use na.rm.  
```{r}
mean(student2, na.rm = TRUE)
```

For student 3, we can replace the missed assignment NA values with a score of 0. 

We can do this by using the 'is.na()' function: 
```{r}
#student3[is.na(student3)] <- 0 
```

We create a temporary variable 'x' to store our data in case we mess up: 
```{r}
x <- student3
x[is.na(x)] <- 0 
mean(x)
```

Finally, we want to drop the lowest score before calculating th mean.  This is equivalent to allowing the student to drop their worst assignment score. We can do this by using 'which.min()' to find the lowest score and remove it from the list.

```{r}
x <- student1
x[-which.min(x)]
```

Now, we can put them all together to make our working snippet:
```{r}
x <- student3

#Map/Replace NA values to zero 
x[is.na(x)] <- 0
#Exclude the lowest score and calculate the mean 
mean(x[-which.min(x)])
```

This is our working snippet that we can turn into a function called 'grade()'

All functions in R have at least 3 things: 
- **Name**, in our case "grade"
- Input **arguments**, student1, etc. 
- **Body**, this is our working snippet

```{r}
grade <- function(x) {
  #Map/Replace NA values to zero 
  x[is.na(x)] <- 0
  
  #Exclude the lowest score and calculate the mean 
  mean(x[-which.min(x)])
}
```

Can I use the function now? 

```{r}
grade(student1)
```

Read a gradebook from online: 
```{r}
hw <- read.csv("https://tinyurl.com/gradeinput", row.names = 1)
hw
```

The function 'apply()' allows us to take any function and apply it to a dataframe. 

apply(data, margin = 1 (rows) or 2 (columns), function)

We can use it to grade all students in the class with our 'grade()' function

to look at student grades: 
```{r}
ans <- apply(hw, 1, grade)
ans
```

> Q2: Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? 

```{r}
ans[which.max(ans)]
```


> Q3: From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall?

```{r}
avg.scores <-apply(hw, 2, mean, na.rm = TRUE)
which.min(avg.scores)
```

```{r}
tot.scores <- apply(hw, 2, sum, na.rm = TRUE)
which.min(tot.scores)
```

```{r}
tot.scores
avg.scores
```

hw2 seems to be the toughest on students 

> From your analysis of the gradebook, which homework was most
predictive of overall score (i.e. highest correlation with average grade score)?

```{r}
hw$hw1
```

```{r}
ans
```

```{r}
cor(hw$hw1, ans)
cor(hw$hw3, ans)
```

If I try hw2, it will return NA because there are missing homeworks/NA values in the dataset. We need to mask all NA values to zero. 

```{r}
mask <- hw
mask[is.na(mask)] <- 0 
mask
```

We can now find correlation values for all hws: 
```{r}
cor(mask$hw2, ans)
cor(mask$hw4, ans)
cor(mask$hw5, ans)
```

to look at all correlation values for all hw: 
```{r}
apply(mask, 2, cor, y = ans)
```

hw5 has the highest correlation value 

